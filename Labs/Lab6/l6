Joseph Haggerty - jmh463
CS 265 - Section 002
Lab 6

Q1:
add creates a State, populates it with a string prefix, calls addsuffix to add an array of suffixes to the State object, then puts the created State in the state table. addsuffix just creates a Suffix which contains one suffix word and a pointer to the next suffix.

Q2:
lookup accepts a string prefix and a boolean. It iterates thru the state table determine if a state exists. If the prefix is found in a state, a point to the state is returned. If the prefix is not found and the boolean arg is true, then a new state is created for that prefix. add and generate call this function.

Q3:
(null)	(null)	| It's
(null)	It's	| a
It's	a	| new
a	new	| dawn
new	dawn	| (null)

a. 3
b. 3
c. 3
d. 2

Q4:
Instead of the same string being stored to many memory locations, many pointers point to the same memory location of that string. This greatly reduces the amount of memory the program uses and speeds up prodessing.

Q5:
If a string is modified at the memory locations, then all occurances in the state table will reflect that change and possibly be grammatically incorrect. The pointer at the desired entry in the table would have to point to the location of the desired new word.
The program does not free up any memory that it allocates, but the memory will be freed when the program exits.

Q6:
void clean()
{
	State *sp = NULL;
	State *tmp = NULL;
	int i;
	for (i = 0; i < NHASH; i++)
	{
		for (sp = statetab[i]; sp != NULL; sp = tmp)
		{
			tmp = sp->next;
			free(sp);
		}
	}
}

Q7:
Yes, but I had to declare the function explicity before making any calls to it in main().

Q8:
Store the memory address that the pointer points to, then free the actual memory. For subsequent pointer, check if they point to the stored memory address. If there is a match, then don't attempt to free that memory address.

Q9:
Prefixes are stored in a deque. This is a double ended queue that allows us to add and remove elements from the beginning or end of the sequence. Deque is more efficient with operations at its beginning than the vector.

Q10:
A map with Prefixes as the key and a vector of strings as the value.

Q11:
A vector of strings

Q12:
Each suffix can be separately modified since it's in its own vector object, unlike C pointing to one memory location for all instances of a string.

Q13:
This will create more objects and store more strings than the C implementation, thus use more memory.

Q14:
Prefixes are stored in a tuple

Q15:
A Python dictionary serves as the dictionary

Q16:
Suffixes are stored in a list, which is subsequently stored as the dictionary value.

Q17:
Python has higher-level built in data types that often allow less code to be written to accomplish the same objective as in C++. Also no need for type declaration.

Q18:
Python's higher-level comes at a cost of lower performance than in C++.
